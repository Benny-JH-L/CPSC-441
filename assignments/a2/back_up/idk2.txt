import socket
import threading
import time
import os
import random
from urllib.parse import urlparse
import logging
import re

# Configuration
HOST = '127.0.0.1'  # Localhost
PORT = 8080         # Port to run the proxy on
DELAY = 0.1         # Delay in seconds per chunk of data
# DELAY = 1.0       # Delay in seconds per chunk of data
CHUNK_SIZE = 1024   # Size of data chunks to send
MEME_FOLDER = "meme_folder"  # Folder containing meme images

logging.basicConfig(filename='log_server.txt', level=logging.INFO, format='%(asctime)s - %(message)s')

def get_random_meme():
    """Return the content of a random meme file from the meme folder."""
    if not os.path.exists(MEME_FOLDER):
        logging.error(f"Meme folder {MEME_FOLDER} does not exist")
        return None
        
    meme_files = [f for f in os.listdir(MEME_FOLDER) if os.path.isfile(os.path.join(MEME_FOLDER, f)) and 
                  f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp'))]
    
    if not meme_files:
        logging.error(f"No image files found in {MEME_FOLDER}")
        return None
        
    meme_file = random.choice(meme_files)
    with open(os.path.join(MEME_FOLDER, meme_file), 'rb') as f:
        return f.read(), meme_file

def handle_client(client_socket, client_addr):
    request = client_socket.recv(4096)
    logging.info(f"Received request from client: {client_addr}")
    
    try:
        first_line = request.split(b'\r\n')[0]
        url = first_line.split(b' ')[1]
        parsed_url = urlparse(url.decode('utf-8'))
        
        host = parsed_url.hostname
        path = parsed_url.path + '?' + parsed_url.query if parsed_url.query else parsed_url.path
        if not path:
            path = '/'
            
        port = parsed_url.port if parsed_url.port else 80
        
        remote_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        remote_socket.connect((host, port))
        remote_socket.send(request)  # Forward the original request
        
        # For handling chunked responses
        buffer = b""
        receiving_response = True
        
        # Track image responses
        is_image_response = False
        content_type = None
        content_length = None
        
        # Headers not yet received
        headers_received = False
        headers = b""
        body = b""
        
        while receiving_response:
            chunk = remote_socket.recv(CHUNK_SIZE)
            if not chunk:
                break
                
            buffer += chunk
            
            # If we haven't processed headers yet
            if not headers_received:
                if b'\r\n\r\n' in buffer:
                    headers, body = buffer.split(b'\r\n\r\n', 1)
                    headers_received = True
                    
                    # Check if this is an image response
                    if b'Content-Type: image/' in headers:
                        is_image_response = True
                        content_type = re.search(b'Content-Type: (image/[^\r\n]+)', headers)
                        if content_type:
                            content_type = content_type.group(1)
                    elif b'image/' in headers:
                        print(f"There is an image in headers {headers}")
                    
                    # Get Content-Length if available
                    content_length_match = re.search(b'Content-Length: (\d+)', headers)
                    if content_length_match:
                        content_length = int(content_length_match.group(1))
                    
                    # Check for redirection
                    if b'HTTP/1.1 301' in headers or b'HTTP/1.1 302' in headers:
                        redirect_match = re.search(b'Location: ([^\r\n]+)', headers)
                        if redirect_match:
                            new_url = redirect_match.group(1).strip()
                            logging.info(f"Redirecting to {new_url.decode('utf-8')}")
                            print(f"Redirecting to {new_url.decode('utf-8')}")
                            # Handle redirection by closing connection and letting client retry
                            client_socket.send(buffer)
                            remote_socket.close()
                            client_socket.close()
                            return
            
            # If this is an image response and we should replace it
            if is_image_response and random.random() < 0.5:  # 50% chance to replace
                if headers_received and (content_length is None or len(body) >= content_length):
                    # We have the full image, replace it
                    meme_data, meme_filename = get_random_meme()
                    if meme_data:
                        logging.info(f"Replacing image with meme: {meme_filename}")
                        
                        # Create new headers with updated content-length
                        new_headers = headers
                        if content_length:
                            new_headers = re.sub(
                                b'Content-Length: \d+', 
                                f'Content-Length: {len(meme_data)}'.encode(), 
                                headers
                            )
                        
                        # Send the modified response
                        client_socket.send(new_headers + b'\r\n\r\n' + meme_data)
                        receiving_response = False
                        break
            
            # For non-image responses or images we're not replacing, forward as-is
            if len(buffer) > 0:
                client_socket.send(buffer)
                buffer = b""
                time.sleep(DELAY)  # Slow down response
        
        remote_socket.close()
    except Exception as e:
        logging.error(f"Error: {e}")
    
    client_socket.close()

def start_proxy():
    print(f"Server proxy running on {HOST}:{PORT}, with a delay of {DELAY} seconds per {CHUNK_SIZE} bytes.")
    logging.info(f"Server proxy started on {HOST}:{PORT}")
    
    # Ensure meme folder exists
    if not os.path.exists(MEME_FOLDER):
        os.makedirs(MEME_FOLDER)
        logging.warning(f"Created meme folder at {MEME_FOLDER} - please add image files")
    
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    
    try:
        while True:
            client_socket, addr = server_socket.accept()
            print(f"Connection from {addr}")
            logging.info(f"Connection from {addr}")
            client_handler = threading.Thread(target=handle_client, args=(client_socket, addr))
            client_handler.start()
    except KeyboardInterrupt:
        logging.info("Server shutting down")
        print("Server shutting down")
    finally:
        server_socket.close()

if __name__ == "__main__":
    start_proxy()
